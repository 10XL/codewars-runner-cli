# EXAMPLE USAGE:  (FIRST BUILT): docker build -t objc .
# EXAMPLE USAGE:  docker run objc run -l objc -c "NSLog(@\"Codewars Objective C\");"

# Pull base image.
FROM codewars/base-runner

# Optionally mount '/objc-vol' on ephemeral storage vol for faster
# installing of packages, compiling, etc.
env OBJC_VOL /objc-vol
env OBJC_GEN_DIR $OBJC_VOL/objc-gen
env OBJC_SOURCE_DIR $OBJC_VOL/objc-source

RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN add-apt-repository 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.9 main' 
RUN wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key| apt-key add -

RUN apt-key update
RUN apt-get update
RUN apt-get upgrade -y

# Install pre-requisities
RUN apt-get install -y cmake clang-3.9 lldb-3.9 llvm build-essential gobjc gobjc++ libblocksruntime-dev libkqueue-dev libpthread-workqueue-dev  libxml2-dev libjpeg-dev libtiff-dev libpng12-dev libcups2-dev libfreetype6-dev libcairo2-dev libxt-dev libgl1-mesa-dev libdispatch-dev
  
RUN ln -s /usr/bin/clang-3.9 /usr/bin/clang
RUN ln -s /usr/bin/clang++-3.9 /usr/bin/clang++

# Set clang as compiler
ENV CC=clang
ENV CXX=clang++

#Install dependencies sources
RUN mkdir -p /source
WORKDIR /source

# Checkout sources
RUN mkdir -p icu && wget -q http://download.icu-project.org/files/icu4c/56.1/icu4c-56_1-src.tgz && tar -xf icu4c-56_1-src.tgz
RUN mkdir -p libobjc2 && wget -qO- https://github.com/gnustep/libobjc2/archive/v1.8.1.tar.gz | tar xz -C libobjc2 --strip-components=1
RUN mkdir -p make && wget -qO- ftp://ftp.gnustep.org/pub/gnustep/core/gnustep-make-2.6.8.tar.gz | tar xz -C make --strip-components=1
RUN mkdir -p base && wget -qO- ftp://ftp.gnustep.org/pub/gnustep/core/gnustep-base-1.24.9.tar.gz | tar xz -C base --strip-components=1
RUN mkdir -p gui && wget -qO- ftp://ftp.gnustep.org/pub/gnustep/core/gnustep-gui-0.25.0.tar.gz | tar xz -C gui --strip-components=1
RUN mkdir -p back && wget -qO- ftp://ftp.gnustep.org/pub/gnustep/core/gnustep-back-0.25.0.tar.gz | tar xz -C back --strip-components=1

# Install ICU
WORKDIR /source/icu/source 
RUN ./configure && make && make install
WORKDIR /source

# Install gnustep-makefile
WORKDIR /source/make
RUN ./configure --enable-debug-by-default --with-layout=gnustep --enable-objc-nonfragile-abi --enable-objc-arc
RUN make && make install 
WORKDIR /source

# Install libobjc2
WORKDIR /source/libobjc2
RUN . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh && cmake . -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_LIBDIR=/usr/lib -DCMAKE_ASM_COMPILER=clang -DTESTS=OFF 
RUN . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh && make 
RUN make install
WORKDIR /source

# add /usr/local/lib to libs search paths
RUN echo "/usr/local/lib" > /etc/ld.so.conf.d/my.conf 
RUN ldconfig

ENV LDFLAGS=-ldispatch
ENV OBJCFLAGS="-fblocks -fobjc-runtime=gnustep-1.8.1"

# Install gnustep-makefile again
WORKDIR /source/make
RUN . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh && ./configure --enable-debug-by-default --with-layout=gnustep --enable-objc-nonfragile-abi --enable-objc-arc
RUN . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh && make && make install
WORKDIR /source

# Install gnustep-base
WORKDIR /source/base
RUN . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh && ./configure && make && make install
WORKDIR /source
  
# Install gnustep-gui
WORKDIR /source/gui
RUN . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh && ./configure && make && make install
WORKDIR /source
  
# Install gnustep-backend
WORKDIR /source/back
RUN . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh && ./configure && make && make install
WORKDIR /source

WORKDIR /

# Add the package json first to a tmp directory and build, copy over so that we dont rebuild every time
ADD package.json /tmp/package.json
RUN cd /tmp && npm install --production
RUN mkdir -p /runner && cp -a /tmp/node_modules /runner

# ADD cli-runner and install node deps
ADD . /runner

# Install libobjc and headers
#ADD frameworks/objc/objc /usr/local/include/objc
ADD frameworks/objc/CW /usr/local/include/CW
# Reset the environment
ENV LDFLAGS=
ENV OBJCFLAGS=
WORKDIR /runner

# Run the test suite to make sure this thing works
USER codewarrior

# Set environment variables
ENV USER codewarrior
ENV HOME /home/codewarrior
ENV PATH /usr/GNUstep/Local/Tools:/usr/GNUstep/System/Tools:${PATH}
ENV LD_LIBRARY_PATH /usr/GNUstep/Local/Library/Libraries:/usr/GNUstep/System/Library/Libraries:${LD_LIBRARY_PATH}

RUN mocha -t 5000 test/runners/objc_spec.js

# timeout is a fallback in case an error with node
# prevents it from exiting properly
ENTRYPOINT ["timeout", "15", "node"]