# EXAMPLE USAGE:  (FIRST BUILT): docker build -t objc .
# EXAMPLE USAGE:  docker run objc run -l objc -c "NSLog(@\"Codewars Objective C\");"

# Pull base image.
FROM codewars/base-runner

# Optionally mount '/objc-vol' on ephemeral storage vol for faster
# installing of packages, compiling, etc.
env OBJC_VOL /objc-vol
env OBJC_GEN_DIR $OBJC_VOL/objc-gen
env OBJC_SOURCE_DIR $OBJC_VOL/objc-source

RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN add-apt-repository 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.9 main' 
RUN wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key| apt-key add -

RUN apt-key update
RUN apt-get update
RUN apt-get upgrade -y

# Install pre-requisities
RUN apt-get install -y cmake clang-3.9 lldb-3.9 llvm build-essential gobjc gobjc++ libblocksruntime-dev libkqueue-dev libpthread-workqueue-dev  libxml2-dev libjpeg-dev libtiff-dev libpng12-dev libcups2-dev libfreetype6-dev libcairo2-dev libxt-dev libgl1-mesa-dev libdispatch-dev
  
RUN ln -s /usr/bin/clang-3.9 /usr/bin/clang
RUN ln -s /usr/bin/clang++-3.9 /usr/bin/clang++

# Set clang as compiler
ENV CC=clang
ENV CXX=clang++

# Add the package json first to a tmp directory and build, copy over so that we dont rebuild every time
ADD package.json /tmp/package.json
RUN cd /tmp && npm install --production
RUN mkdir -p /runner && cp -a /tmp/node_modules /runner

# ADD cli-runner and install node deps
ADD . /runner

# Install libobjc and headers
#ADD frameworks/objc/objc /usr/local/include/objc
ADD frameworks/objc/CW /usr/local/include/CW
# Reset the environment
ENV LDFLAGS=
ENV OBJCFLAGS=
WORKDIR /runner

# Run the test suite to make sure this thing works

USER codewarrior

# Set environment variables
ENV USER codewarrior
ENV HOME /home/codewarrior
RUN ls -la
RUN mocha -t 5000 test/runners/objc_spec.js

# timeout is a fallback in case an error with node
# prevents it from exiting properly
ENTRYPOINT ["timeout", "15", "node"]