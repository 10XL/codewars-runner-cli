# BUILD-USING:    docker build -t codewars/runner-func .
# TEST-USING:     docker run --rm -i -t --name=test-runner-func --entrypoint=/bin/bash codewars/runner-haskell -s
# RUN-USING:      docker run --rm --name=runner-func codewars/runner-func --help

# Pull base image.
FROM codewars/base-runner

# Install Racket
RUN apt-get -y install racket

# Install SBCL (Steel Bank Common Lisp)
RUN apt-get -y install sbcl

# Install OCAML
RUN apt-get -y install ocaml-nox

# Needed to run add-apt-repository
RUN apt-get -y install software-properties-common

# Install Haskell
## ensure locale is set during build
ENV LANG C.UTF-8

RUN apt-get -y install libghc-zlib-dev happy

RUN echo 'deb http://ppa.launchpad.net/hvr/ghc/ubuntu trusty main' > /etc/apt/sources.list.d/ghc.list && \
    echo 'deb http://download.fpcomplete.com/debian/jessie stable main'| tee /etc/apt/sources.list.d/fpco.list && \
    # hvr keys
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F6F88286 && \
    # fpco keys
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C5705533DA4F78D8664B5DC0575159689BEFB442 && \
    apt-get update && \
    apt-get install -y --no-install-recommends cabal-install-1.22 ghc-7.10.3 happy-1.19.5 alex-3.1.4 \
            stack zlib1g-dev libtinfo-dev libsqlite3-0 libsqlite3-dev ca-certificates g++ && \
    rm -rf /var/lib/apt/lists/*

ENV PATH /root/.cabal/bin:/root/.local/bin:/opt/cabal/1.22/bin:/opt/ghc/7.10.3/bin:/opt/happy/1.19.5/bin:/opt/alex/3.1.4/bin:$PATH

# Install Haskell Packages
RUN apt-get -y install libghc-zlib-dev pkg-config happy
RUN cabal update
RUN cabal install hspec
RUN cabal install haskell-src-exts lens
RUN cabal install esqueleto persistent-sqlite persistent-template
RUN cabal install split ifelse

# ADD cli-runner and install node deps
ADD . /runner

WORKDIR /runner
RUN npm install --production

# Run the test suite to make sure this thing works

USER codewarrior
# Set environment variables
ENV USER codewarrior
ENV HOME /home/codewarrior
#RUN mocha -t 5000 test/runners/{haskell,ocaml,lisp,racket}_spec.js

#timeout is a fallback in case an error with node
#prevents it from exiting properly
ENTRYPOINT ["timeout", "15", "node"]
